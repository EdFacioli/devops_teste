name: 'Amo Promo Test DevOps'

on:
  workflow_dispatch:
  
permissions:
  contents: read

env:
  region: sa-east-1

jobs:
  infra:
    name: 'Terraform Infra'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.region }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.2
        
    - name: Terraform Init
      run: |
        cd terraform-infra
        terraform init

    - name: Terraform Plan
      run: | 
        cd terraform-infra
        terraform plan -input=false -var-file=terraform.production.tfvars

    - name: Terraform Apply
      run: |
        cd terraform-infra
        terraform apply -auto-approve -input=false -var-file=terraform.production.tfvars
    
    # Sed necessario, pois o actions joga lixo no redirecionamento
    - name: Outputs
      run: |
        mkdir outputs
        cd terraform-infra
        terraform output > ../outputs/variables.txt
        sed -i '/^::/d' ../outputs/variables.txt
        sed -i '1d' ../outputs/variables.txt
        sed -i 's/^/\n/' ../outputs/variables.txt
        cat ../outputs/variables.txt
            
    - name: Upload variables
      uses: actions/upload-artifact@v3
      with:
        name: variaveis
        path: outputs/variables.txt
        
  build:
    name: 'Build and upload image in ECR'
    runs-on: ubuntu-latest
    needs: infra
    
    defaults:
      run:
        shell: bash
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.region }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Setup Golang
      uses: actions/setup-go@v3
      with:
        go-version: '>=1.18.0'
      
    - name: Test
      env:
        DEVOPSTESTE_NAME: Amo Promo
      run: |
        cd app
        go test -v  
    
    - name: Build/Upload
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
  deploy_ecs:
    name: 'Terraform Deploy Service'
    runs-on: ubuntu-latest
    needs: [build, infra]
    
    defaults:
      run:
        shell: bash
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Download file for terraform
      uses: actions/download-artifact@v3
      with:
        name: variaveis
    - shell: bash
      run: |
        cat variables.txt >> terraform-deploy/terraform.production.tfvars
        echo -e "tag = \"${{ github.sha }}\" \n" >> terraform-deploy/terraform.production.tfvars
        cat terraform-deploy/terraform.production.tfvars
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.region }}

    - name: Terraform Init
      run: |
        cd terraform-deploy
        terraform init
    
    - name: Terraform Plan
      run: | 
        cd terraform-deploy
        terraform plan -input=false -var-file=terraform.production.tfvars

    - name: Terraform Apply
      run: |
        cd terraform-deploy
        terraform apply -auto-approve -input=false -var-file=terraform.production.tfvars
